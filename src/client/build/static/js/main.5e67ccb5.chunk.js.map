{"version":3,"sources":["environment/environment.ts","serviceWorker.ts","helpers/authGuard.ts","helpers/messagesHelper.ts","helpers/api.ts","services/AuthService.ts","lib/components/loggedPanel/loggedPanel.tsx","lib/components/header/header.tsx","lib/components/footer/footer.tsx","lib/components/content/content.tsx","lib/components/login/login.tsx","validation/userValidation.ts","services/UserService.ts","lib/components/signup/signup.tsx","lib/components/hero/hero.tsx","lib/components/section/section.tsx","app/pages/home/home.tsx","lib/components/codeBlock/codeBlock.tsx","app/config/posts-routing.ts","posts/0-introduction.tsx","posts/1-structure.tsx","posts/2-database.tsx","posts/3-entities.tsx","posts/4-repositories.tsx","posts/5-router.tsx","posts/6-validations.tsx","posts/7-services.tsx","posts/8-controllers.tsx","posts/9-body-parser.tsx","lib/components/sidebar/sidebar.tsx","app/pages/tutorial/tutorial.tsx","app/pages/challenges/challenges.tsx","app/pages/register/register.tsx","app/config/routing.tsx","lib/components/route/route.tsx","lib/components/main/main.tsx","app/pages/layout.tsx","index.tsx"],"names":["__dirname","path__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","dotenv__WEBPACK_IMPORTED_MODULE_1__","config","path","resolve","console","log","Boolean","window","location","hostname","match","token_key","loggedIn","token","getToken","localStorage","getItem","_checkStatus","_x","_checkStatus2","apply","this","arguments","_callee","response","res","error","regenerator_default","a","wrap","_context","prev","next","status","abrupt","json","sent","Error","message","stop","ApiService","Object","classCallCheck","createClass","key","value","_fetch","fetch","_x2","toString","url","options","headers","Accept","Content-Type","authGuard","objectSpread","then","api","AuthService","domain","process","PROJECT_URL","username","password","method","body","JSON","stringify","email","setItem","removeItem","auth","LoggedPanel","_React$Component","possibleConstructorReturn","getPrototypeOf","inherits","logout","react_default","createElement","Nav_default","className","id","NavDropdown_default","title","Item","Divider","react_router_dom","to","onClick","_logout","Image_default","src","width","height","roundedCircle","React","Component","Header","props","_this","call","state","isLogged","items","filter","i","onlyGuest","map","item","href","loggedPanel_LoggedPanel","Navbar_default","bg","variant","alt","_renderNavItems","_renderUserPanel","Footer","Container_default","fluid","style","minHeight","Content","markdown","Row_default","children","Login","touched","_onChange","bind","assertThisInitialized","_handleSubmit","e","_objectSpread2","setState","defineProperty","target","field","validationResult","info","schema","joi","required","label","min","max","stripUnknown","validateLogin","marginTop","fontSize","color","details","d","index","_this2","asyncToGenerator","mark","login","history","push","catch","err","_this3","Col_default","Form_default","Group","Control","onBlur","_handleBlur","type","placeholder","onChange","_renderServerErrors","_renderValidationErrors","Button_default","userService","UserService","newUser","Signup","f_name","l_name","confirmPassword","isRegistered","validated","err_form","_userSignup","data","validate","user","valid","language","any","allowOnly","validateUser","detail","context","create","isInvalid","Feedback","_renderFormError","disabled","Hero","innerWidth","Card_default","zIndex","Section","sectionCss","backgroundColor","bgColor","noGutters","Home","hero_Hero","login_Login","section_Section","typescript","require","bash","jsonLanguage","shell","hljs","registerLanguage","configure","languages","CodeBlock","_React$PureComponent","current","ReactDOM","findDOMNode","highlightBlock","PureComponent","PATHS","introduction","BASE_PATH","structure","database","entities","repositories","router","validations","services","controllers","bodyParser","postsRoutes","isIndex","post","codeBlock_CodeBlock","Sidebar","_handleListClick","actualPath","listItems","Tutorial","sidebar_Sidebar","pathname","md","react_router","exact","render","content_Content","Challenges","event","preventDefault","checked","name","_callee2","_context2","t","controlId","Label","as","rows","Register","signup_Signup","routes","component","home_Home","displayInNavBar","tutorial_Tutorial","challenges_Challenges","isProtected","register_Register","Route","_this$props","rest","objectWithoutProperties","assign","cloneElement","from","Main","Fragment","esm_extends","route_Route","Layout","HeaderM","withRouter","_ref","header_Header","main_Main","footer_Footer","layout","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e67ccb5.chunk.js","sourcesContent":["import { resolve } from \"path\"\n\nimport { config } from \"dotenv\"\n\nconfig({ path: resolve(__dirname, \"../../.env\") })\n\nconsole.log({ path: resolve(__dirname, \"../.env\") })\n\n// export const BASE_URL = process.env.PROJECT_URL + '/api/v1'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import jwt from 'jsonwebtoken';\n\nconst token_key = 'reddit_clone_token';\n\nconst AUTH_SECRET = 'asdfg;lkjh';\nexport function loggedIn(){\n    const token = getToken();\n    console.log(\"authGuard \", !!token)\n    // return !!token && !isTokenExpired();\n    return !!token;\n}\n// export function isTokenExpired(){\n\n// }\nexport function setToken(token:any){\n    localStorage.setItem(token_key, token)\n}\nexport function getToken(){\n    const token = localStorage.getItem(token_key)\n    return token;\n}\nexport function removeToken(){\n    localStorage.removeItem(token_key);\n}\ninterface Decoded{\n    id: number\n}\n\nexport function getLoggedUser(){\n    let token = getToken()\n    let user = {id: undefined}\n    if (token){\n        return jwt.verify(token, AUTH_SECRET, (err,decoded)=>{\n            if (err) {\n                throw new Error()\n              } else {\n                    Object.assign(user, decoded)\n                    return user.id\n              }\n        })\n    } \n    return null;\n}\n\n","export async function _checkStatus(response:any){\n    if(response.status >= 200 && response.status < 300){\n        return response;\n    } else {\n        let res = await response.json()\n        console.log(res['Error'])\n        let error = new Error(res['Error']);\n        error.message = res['Error'];\n        throw error;\n    }\n}","import * as authGuard from './authGuard';\nimport * as message from './messagesHelper';\n\nexport class ApiService {\n    \n    fetch (url:string, options:any):any {\n        const headers:any = {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }\n        if(authGuard.loggedIn()){\n            headers['x-auth-token'] = authGuard.getToken();\n        }\n        console.log(url)\n        return fetch(url,{\n            ...options,\n            headers\n        })\n        .then(message._checkStatus)\n        .then((response:any) => response.json())\n\n    }\n}","import * as authGuard from '../helpers/authGuard'\nimport {ApiService} from '../helpers/api'\n\nconst api = new ApiService;\n\nexport class AuthService {\n    domain:string\n    constructor(domain?:string){\n        this.domain = domain || process.env.PROJECT_URL + '/auth/login'\n    }\n\n    public login(username:any, password:any){\n        return api.fetch(this.domain,{\n                method:'POST',\n                body:JSON.stringify({\n                    email: username,\n                    password: password\n                })\n            })\n            .then((response:any) => {\n                authGuard.setToken(response.token)\n                return response;})  \n        \n        \n    }\n    public logout(){\n        authGuard.removeToken();\n    }\n\n\n}","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport Image from 'react-bootstrap/Image';\nimport { AuthService } from '../../../services/AuthService';\nimport { Link } from 'react-router-dom';\n\n\nconst auth = new AuthService;\nexport class LoggedPanel extends React.Component{\n    private _logout(){\n        auth.logout();\n    }\n    render(){\n        return (\n            <Nav className=\"\" id=\"userMenu\">\n                <NavDropdown title=\"\" id=\"basic-nav-dropdown\" className=\"d-flex flex-row-reverse\">\n                    <NavDropdown.Item>Profile</NavDropdown.Item>\n                    <NavDropdown.Item>Another action</NavDropdown.Item>\n                    <NavDropdown.Item>Something</NavDropdown.Item>\n                    <NavDropdown.Divider />\n                    <NavDropdown.Item ><Link to=\"/\" onClick={this._logout}>Logout</Link></NavDropdown.Item>\n                </NavDropdown>\n                <Image src=\"/images/profileImage.svg\" width={50} height={50} roundedCircle/>\n            </Nav>\n        )\n        \n    }\n\n}","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { Link } from 'react-router-dom';\nimport * as authGuard from '../../../helpers/authGuard';\nimport { LoggedPanel } from '../loggedPanel/loggedPanel';\nimport { Container } from 'react-bootstrap';\n\ninterface NavbarItem {\n    isIndex?: boolean;\n    title: string;\n    href: string;\n    onlyGuest: boolean;\n}\n\ninterface HeaderProps{\n    items:NavbarItem []\n    history?:any\n}\n\ninterface HeaderState{\n    isLogged:boolean;\n}\n\nexport class Header extends React.Component<HeaderProps, HeaderState>{\n    public constructor(props: HeaderProps) {\n        super(props);\n            this.state = {isLogged:authGuard.loggedIn()}\n        };\n    private _renderNavItems(items:NavbarItem[]){\n        if(authGuard.loggedIn()){\n            return (\n                items.filter((i:NavbarItem) => i.onlyGuest !== true).map((item, key) => {\n                    return (\n                        <Link className=\"nav-link\" to={item.href} key={key} >\n                            {item.title}\n                        </Link>\n                    );\n                })\n            )\n        }else{\n            return (\n                items.map((item, key) => {\n                    return (\n                        <Link className=\"nav-link\" to={item.href} key={key} >\n                            {item.title}\n                        </Link>\n                    );\n                })\n            )\n        }\n\n        \n    }\n    private _renderUserPanel(){\n        if(authGuard.loggedIn()){\n            return <LoggedPanel/>\n        }\n        return <div></div>\n    }\n    render(){\n        return (\n\n            <Navbar bg=\"dark\" variant=\"dark\" className=\"sticky-top bg-winter\">\n                <Link className=\"\" to=\"/\" ><img\n                    src=\"/images/logo2.png\"\n                    width=\"125\"\n                    height=\"50\"\n                    className=\"d-inline-block align-top\"\n                    alt=\"React Bootstrap logo\"/>\n                </Link>\n                <Nav className=\"ml-auto\">\n                    {this._renderNavItems(this.props.items)}\n                </Nav>{this._renderUserPanel()}\n               \n            </Navbar>\n        )\n        \n    }\n\n}","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nexport class Footer extends React.Component{\n    render(){\n        return (\n            <Container fluid className=\"bg-secondary\" style={{minHeight:\"200px\"}}>\n            </Container>\n        )\n    }\n\n}","import React from \"react\";\nimport { withRouter, RouteProps } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\n\ninterface ContentProps  {\n  className?:string;\n}\n\ninterface ContentState {\n}\n\nexport class Content extends React.Component<ContentProps, ContentState> {\n  public constructor(props: ContentProps) {\n    super(props);\n    this.state = {\n      markdown: null\n    };\n  }\n  public render() {\n      return <Container className={(this.props.className ? this.props.className: \"\")}fluid>\n\n        <Row className=\"px-4\">\n          {this.props.children}\n        </Row>\n        \n      </Container>;\n  }\n}","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Form from 'react-bootstrap/Form';\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from 'react-router-dom';\nimport { validateLogin } from \"../../../validation/userValidation\";\nimport { AuthService } from \"../../../services/AuthService\";\ninterface LoginProps {\n    history: any;\n}\n\ninterface LoginState {\n    email: string;\n    password: string;\n    error: string | null;\n    touched: {\n        email: boolean,\n        password: boolean\n      }\n}\nconst auth:AuthService = new AuthService;\nexport class Login extends React.Component<LoginProps,LoginState> {\n    public constructor(props: LoginProps) {\n        super(props);\n        this.state = {\n            email: \"\",\n            password: \"\",\n            error: null,\n            touched: {\n                email: false,\n                password: false\n              }\n        };\n        this._onChange = this._onChange.bind(this)\n        this._handleSubmit = this._handleSubmit.bind(this)\n    }\n\n    private _onChange(e:any) {\n        this.setState({ ...this.state, [e.target.id]:e.target.value, error:null })\n    }\n    private _handleBlur(field:any){\n        this.setState({\n          touched: { ...this.state.touched, [field]: true }\n        });\n      }\n    private _renderValidationErrors() {\n        const validationResult = validateLogin({\n            email: this.state.email,\n            password: this.state.password\n        });\n        if (!!validationResult.error && (this.state.touched.email || this.state.touched.email)) {\n            return <div className=\"text-center\" style={{\n                width: \"100%\",\n                marginTop: \"0.25rem\",\n                fontSize: \"80%\",\n                color: \"#dc3545\"}}>\n                    {validationResult.error.details.map((d:any, index:any) => <div key={index}>{d.message}\n                </div>)}\n            </div>;\n        } else {\n            return <div></div>;\n        }\n    }\n    private _renderServerErrors() {\n        if (!!this.state.error) {\n            return <div className=\"text-center\" style={{\n                width: \"100%\",\n                marginTop: \"0.25rem\",\n                fontSize: \"80%\",\n                color: \"#dc3545\"}}>{this.state.error}</div>;\n        } else {\n            return <div></div>;\n        }\n    }\n    private _handleSubmit(){\n\n        (async () => {\n    \n            const rest = auth.login(this.state.email, this.state.password)\n                .then((res:any) => {\n                    this.setState({ error: null });\n                    this.props.history.push(\"/challenges\");\n                })\n                .catch((err:any) => {\n                    console.log(err)\n                    this.setState({ error: err.message });\n                })\n        })();\n    }\n    public render() {\n        return (\n            <Row className=\"align-items-center h-100 pr-4\">\n                <Col><h1>Sign in</h1>\n                <Form className=\"my-3\">\n                    <Form.Group>\n                        <Form.Control\n                            onBlur={()=>this._handleBlur('email')}\n                            type=\"email\"\n                            id=\"email\"\n                            placeholder=\"name@example.com\" \n                            value={this.state.email} \n                            onChange={this._onChange}\n                        />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Control \n                            onBlur={()=>this._handleBlur('email')}\n                            type=\"PASSWORD\" \n                            id=\"password\"\n                            value={this.state.password} \n                            onChange={this._onChange}\n                        />\n                    </Form.Group>\n                    {this._renderServerErrors()}\n                    {this._renderValidationErrors()}\n                    <Button style={{width:'155px'}}\n                        type=\"button\" \n                        onClick={this._handleSubmit}\n                    >SING IN</Button>\n                    <h6 className=\"mt-5 text-center\">Don't have an account? <Link to=\"/register\">Register here</Link></h6>\n    \n                </Form>\n\n                </Col>\n                \n                \n            </Row>\n        );\n    }\n}","import * as joi from 'joi';\n\nexport function validateUser(user: any) {\n  const schema = joi.object({\n    f_name: joi.string().min(3).required().label(\"First Name\"),\n    l_name: joi.string().min(3).required().label(\"Last Name\"),\n    email: joi.string().email().required().label(\"Email\"),\n    password: joi.string().min(6).max(12).required().label(\"Password\"),\n    confirmPassword: joi.string().required().valid(joi.ref('password')).label(\"Confirm Password\").options({\n      language: {\n        any: {\n          allowOnly: '!! \"Password\" and \"Confirm Password\" do not match',\n        }\n      } \n    })\n\n    // The strip unknown options removes unknown elements from \n    // objects and arrays, blocking their inclusion in the database \n  }).options({ stripUnknown: true });\n\n  return joi.validate(user, schema);\n}\n\n\nexport function validateLogin(info: any) {\n  const schema = joi.object({\n    email: joi.string().email().required().label(\"Email\"),\n    password: joi.string().min(6).max(12).required().label(\"Password\"),\n  }).options({ stripUnknown: true });\n\n  return joi.validate(info, schema);\n}\n","import {ApiService} from '../helpers/api'\nimport {getLoggedUser} from '../helpers/authGuard'\n// import { BASE_URL } from '../environment/environment';\n\nconst api  = new ApiService;\n\nexport class UserService {\n    domain:string\n    constructor(domain?:string){\n        this.domain = domain || process.env.PROJECT_URL + '/users'\n    }\n\n    public getAll(){\n        return api.fetch(this.domain,{\n            method:'GET'})\n            .then((res:any) => {return res})\n    }\n    public get(id:number){\n        return api.fetch(this.domain+'/'+id,{\n            method:'GET'})\n            .then((res:any) => {return res})\n    }\n\n    public create(newUser:any){\n        // Object.assign(newUser, {user: getLoggedUser()})\n        // console.log(newUser)\n        return api.fetch(this.domain,{\n            method:'POST',\n            body: JSON.stringify(newUser)\n        })\n        .then((res:any) => {return res})\n    }\n    // public delete(id:number){\n    //     return api.fetch(this.domain+'/'+id,{\n    //         method:'DELETE',\n    //     })\n    //     .then((res:any) => {return res})\n    // }\n\n\n}","import React from \"react\";\nimport * as H from 'history';\nimport Row from \"react-bootstrap/Row\";\nimport Form from 'react-bootstrap/Form';\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link, Redirect } from 'react-router-dom';\nimport { UserService } from \"../../../services/UserService\";\nimport { validateUser } from \"../../../validation/userValidation\";\ninterface SignupProps {\n    history:any;\n    // location: string;\n}\n\ninterface SignupState {\n    email:string;\n    password:string;\n    f_name:string;\n    l_name:string;\n    confirmPassword:string;\n    err_form: string | null;\n    isRegistered: boolean;\n    validated:boolean\n    err: {\n        email:string | null;\n        password:string | null;\n        f_name:string | null;\n        l_name:string | null;\n        confirmPassword:string | null\n\n    };\n}\nconst userService = new UserService;\nexport class Signup extends React.Component<SignupProps,SignupState> {\n    public constructor(props:SignupProps) {\n        super(props);\n       this.state ={\n            email:\"\",\n            password:\"\",\n            f_name:\"\",\n            l_name:\"\",\n            confirmPassword:\"\",\n            isRegistered:false,\n            validated:false,\n            err_form: null,\n            err: {\n                f_name: null,\n                l_name: null,\n                email: null,\n                password: null,\n                confirmPassword:null\n            }\n       }\n\n    this._onChange = this._onChange.bind(this);\n    this._userSignup = this._userSignup.bind(this);\n\n    }\n    private _onChange(e:any) {\n        let data:any = this.state;\n        data[e.target.id] = e.target.value;\n        let state = this.validate(data)\n        this.setState(state)\n    }\n\n\n    private validate(data:any){\n        data.err_form=null;\n        data.err={\n            f_name: null,\n            l_name: null,\n            email: null,\n            password: null,\n            confirmPassword:null\n        }\n        let validated = validateUser(data)\n        if (!!validated.error){\n            \n            let detail = validated.error.details[0]\n            let { key }:any = detail.context;\n            data.err[key] = detail.message;\n            data.validated=false;\n        }else{\n\n            data.validated=true;\n        }\n        return data\n    }\n    private _renderFormError(){\n        if(!!this.state.err_form ){\n            return <div className=\"text-center\" style={{\n                width: \"100%\",\n                marginTop: \"0.25rem\",\n                fontSize: \"80%\",\n                color: \"#dc3545\"}}>{this.state.err_form}</div>;\n        } else {\n            return <span></span>;\n            \n        }\n    }\n    private _userSignup(){\n        userService.create({\n            email: this.state.email,\n            password: this.state.password,\n            f_name: this.state.f_name,\n            l_name: this.state.l_name\n        }).then((res:any) => {\n            this.setState({isRegistered:true});\n        })\n        .catch((err:any) => {\n            this.setState({err_form:err.message})\n        });\n    }\n\n    public render() {\n        let {validated} = this.state\n        if(this.state.isRegistered){\n            return(<Row className=\"h-100 pr-4 align-items-center\">\n                <Col className=\"text-center\">\n                <h2>Thank you!!!</h2>\n                <h5>Know you are all set! <Link to=\"/login\">Login</Link> and start your first challenge now!</h5>\n                \n                </Col>\n            </Row>)\n        }\n        return (\n            <Row className=\"h-100 pr-4\">\n                <Col className=\"py-4\"><h1>Sign Up</h1>\n                <Form className=\"my-3\" >\n                    <Form.Group>\n                    <Form.Control\n                            type=\"text\"\n                            id=\"f_name\"\n                            placeholder=\"First Name\" \n                            value={this.state.f_name}\n                            onChange={this._onChange}\n                            isInvalid={!!this.state.err.f_name}\n                        />\n                    <Form.Control.Feedback type=\"invalid\">\n                        {this.state.err.f_name}\n                    </Form.Control.Feedback>\n                    </Form.Group >\n                    <Form.Group>\n                        <Form.Control\n                                type=\"text\"\n                                id=\"l_name\"\n                                placeholder=\"Last Name\" \n                                value={this.state.l_name} \n                                onChange={this._onChange}\n                                isInvalid={!!this.state.err.l_name}\n                                />\n                            <Form.Control.Feedback type=\"invalid\">\n                                {this.state.err.l_name}\n                            </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Control\n                            type=\"email\"\n                            id=\"email\"\n                            placeholder=\"name@example.com\" \n                            value={this.state.email} \n                            onChange={this._onChange}\n                            isInvalid={!!this.state.err.email}\n                        />\n                    <Form.Control.Feedback type=\"invalid\">\n                        {this.state.err.email}\n                    </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Control \n                            type=\"PASSWORD\" \n                            id=\"password\"\n                            placeholder=\"Password\" \n                            value={this.state.password} \n                            onChange={this._onChange}\n                            isInvalid={!!this.state.err.password}\n                        />\n                    <Form.Control.Feedback type=\"invalid\">\n                        {this.state.err.password}\n                    </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group style={{height:\"60px\"}} className=\"mb-1\">\n                        <Form.Control \n                            type=\"PASSWORD\" \n                            id=\"confirmPassword\"\n                            placeholder=\"Confirm Password\"\n                            \n                            onChange={this._onChange}\n                            isInvalid={!!this.state.err.confirmPassword}\n                        />\n                    <Form.Control.Feedback type=\"invalid\">\n                        {this.state.err.confirmPassword}\n                    </Form.Control.Feedback>\n                    </Form.Group>\n                    {this._renderFormError()}\n                    <Button style={{width:'155px'}}\n                        disabled={!validated}\n                        type=\"button\" \n                        onClick={this._userSignup}\n                    >SIGN UP</Button>\n                   \n                    <h6 className=\"mt-5 text-center\">Already has an account? <Link to=\"/login\">Login</Link></h6>\n    \n                </Form>\n                </Col>\n            </Row>\n        );\n    }\n}","import React from 'react';\nimport './hero.css'\nimport Card from 'react-bootstrap/Card';\nimport {Login} from '../';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport class Hero extends React.Component{\n    render(){\n        return(\n            <Container fluid className=\"pb-5 px-0 position-relative\">\n                <div id=\"moon\" className=\"bg-winter d-flex\"></div>\n                <Container fluid={ window.innerWidth < 992 ? true : false}>\n                    <Card style={{zIndex:1}}>\n                    <Row className=\"\">\n                        <Col><img className=\"m-auto d-block img-fluid\" src=\"/images/marble.png\" alt=\"\"/></Col>\n                        <Col>                           \n                            {this.props.children}\n                        </Col>                    \n                    </Row>\n                    </Card>\n                </Container>\n                \n            </Container>  \n            \n        )\n    }\n}","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\ninterface SectionProps{\n    bgColor?: string;\n    noGutters?: boolean;\n}\nexport class Section extends React.Component<SectionProps>{\n    constructor(props:SectionProps){\n        super(props)\n    }\n    render(){\n        const color:string = (this.props as any).bgColor;\n        const sectionCss: React.CSSProperties={\n            backgroundColor: color ,\n        }\n\n        return(\n            <Container fluid style={sectionCss} className=\"d-flex \">\n                <Container className=\"d-flex py-5 border-bottom border-primary\">\n                    <Row className={\"m-auto\" + (this.props.noGutters? ' no-gutter': '')}>\n                        {this.props.children}\n                    </Row>\n                </Container>\n            </Container>\n            \n        )\n    }\n}","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport { Hero } from '../../../lib/components/hero/hero';\nimport { Section } from '../../../lib/components/section/section';\nimport Col from 'react-bootstrap/Col';\nimport { Login } from '../../../lib/components';\n\nexport class Home extends React.Component{\n    render(){\n\n        const {history}:any = this.props;\n        return (\n            <Container fluid className=\"bg-light px-0\">\n                <Hero><Login history={history}/></Hero>\n                <Container fluid >\n                    <Section>\n                        <Col>\n                        <h3 >Lorem Ipsum</h3>\n                        <p>\n                        Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\n                        </p>\n                        </Col>\n                        <Col>\n                        <h3 >Lorem Ipsum</h3>\n                        <p>\n                        Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\n                        </p>\n                        </Col>\n                        <Col>\n                        <h3 >Lorem Ipsum</h3>\n                        <p>\n                        Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\n                        </p>\n                        </Col>\n                    </Section>\n                    <Section noGutters>\n                        <Col className=\"text-center\">\n                        <h2 >Lorem Ipsum</h2>\n                        <p>\n                        Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n                        </p>\n                        </Col>\n                    </Section>\n                    <Section>\n                        <Col className=\"text-center\">\n                            <Image src=\"./images/profileImage.svg\" roundedCircle className=\"mb-3\"/>\n                            <h3>Fernando Marinho</h3>\n                            <p>\n                            Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n                            </p>\n                        </Col>\n                        <Col className=\"text-center\">\n                            <Image src=\"./images/profileImage.svg\" roundedCircle className=\"mb-3\" />\n                            <h3>Gustavo Lessa</h3>\n                            <p>\n                            Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n                            </p>\n                        </Col>\n                        <Col className=\"text-center\">\n                            <Image src=\"./images/profileImage.svg\" roundedCircle className=\"mb-3\"/>\n                            <h3>Lucival</h3>\n                            <p>\n                            Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n                            </p>\n                        </Col>\n                        <Col className=\"text-center\">\n                            <Image src=\"./images/profileImage.svg\" roundedCircle className=\"mb-3\"/>\n                            <h3>Rafael Barros</h3>\n                            <p>\n                            Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n                            </p>\n                        </Col>\n                    </Section>\n                </Container>\n            </Container>\n        )\n    }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport hljs from 'highlight.js'\nimport 'highlight.js/styles/tomorrow-night.css';\nimport './codeBlock.css'\n\nvar typescript = require(\"highlight.js/lib/languages/typescript\");\nvar bash = require(\"highlight.js/lib/languages/bash\");\nvar jsonLanguage = require(\"highlight.js/lib/languages/json\");\nvar shell = require(\"highlight.js/lib/languages/shell\");\n\nhljs.registerLanguage('ts', typescript)\nhljs.registerLanguage('bash', bash)\nhljs.registerLanguage('json', jsonLanguage)\nhljs.registerLanguage('shell', shell)\nhljs.configure({\n  languages: ['ts', 'shell', 'bash', 'json']\n})\nexport class CodeBlock extends React.PureComponent {\n\n  componentDidMount(){\n    let current = ReactDOM.findDOMNode(this)\n    hljs.highlightBlock(current as Node)\n  }\n\n  render() {\n    let { children } = this.props\n    return (\n      <pre className=\"rounded-lg py-3 px-4 mx-n4 mb-4\">\n        <code >\n          {children}\n        </code>\n      </pre>\n    )\n  }\n}","import { RouteComponentProps } from \"react-router-dom\";\nimport { Home } from \"../pages/home/home\";\nimport { Tutorial } from \"../pages/tutorial/tutorial\";\nimport * as post from '../../posts/index';\n\ninterface RouteConf {\n    isIndex?: boolean;\n    displayInNavBar?: boolean;\n    title: string;\n    path: string;\n    post?: any;\n}\nconst BASE_PATH = '/tutorial'\nconst FILES_PATH = '/posts/'\n\n\nexport const PATHS = {\n    introduction: BASE_PATH + '/',\n    structure: BASE_PATH + '/structure',\n    database: BASE_PATH + \"/database\",\n    entities: BASE_PATH + \"/entities\",\n    repositories: BASE_PATH + \"/repositories\",\n    router: BASE_PATH + \"/router\",\n    validations: BASE_PATH + \"/validations\",\n    services: BASE_PATH + \"/services\",\n    controllers: BASE_PATH + \"/controllers\",\n    bodyParser: BASE_PATH + \"/body-parser\",\n}\n\nexport const postsRoutes: RouteConf[] = [\n    { isIndex: true, title: 'Introduction', path: PATHS.introduction, post: post.introduction },\n    { isIndex: true, title: 'Setting Up the Project', path: PATHS.structure, post: post.structure },\n    { isIndex: false, title: 'Database Configuration', path: PATHS.database, post: post.database },\n    { isIndex: false, title: 'Creating the Entity Classes', path: PATHS.entities, post: post.entities },\n    { isIndex: false, title: 'Creating the Repositories', path: PATHS.repositories, post: post.repositories },\n    { isIndex: false, title: 'Routes and App Router', path: PATHS.router, post: post.router },\n    { isIndex: false, title: 'Implementing validation', path: PATHS.validations, post: post.validations },\n    { isIndex: false, title: 'Creating the Services', path: PATHS.services, post: post.services },\n    { isIndex: false, title: 'Creating the Controllers', path: PATHS.controllers, post: post.controllers },\n    { isIndex: false, title: ' Implementing Body Parser', path: PATHS.bodyParser, post: post.bodyParser },\n]","import React from 'react';\nimport Col from 'react-bootstrap/Col';\n\nexport function introduction(props?:any) {\n    return <Col>\n        <h2>\n            Introduction\n        </h2>\n\n        <p>\n        A Basic tutorial on how to build an API in node.js using TypeScript, express, TypeORM and MySQL Database.\n        </p>\n        <p className=\"lead\">\n        Prerequisites\n        </p>\n        <ul>\n            <li><a href=\"https://nodejs.org\">Node.js</a></li>\n            <li><a href=\"https://gitforwindows.org/\">Git Bash</a> (for windows users)</li>\n            <li><a href=\"https://dev.mysql.com/doc/mysql-installation-excerpt/5.7/en/\">MySQL 5.7 Database</a></li>\n        </ul>\n        <p className=\"lead\">\n            Scenario\n        </p>\n        <p>\n        In this tutorial we are going to build a simple blog where users will have roles, profile images and can create articles.\n        </p>\n        \n        <p className=\"lead\"> Database Schema</p>\n\n        <img src='/images/databaseSchema.png' width='100%' />\n\n\n    </Col>;\n  }\n\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { CodeBlock } from '../lib/components/codeBlock/codeBlock';\n\nexport function structure(props?:any) {\n    return (\n      <Col>\n      <h2>Setting Up the Project</h2>\n      <p>\n        Create a new folder called <code>my-project</code> and inside it type $<code>npm init</code>.\n        This will fire some questions that you can setup:\n      </p>\n\n      <CodeBlock>\n        {`npm init \n          \npackage name: (javascript) my-project\nversion: (1.0.0) 0.1.0\ndescription: Fubeca API Tutorial\nentry point: (index.js) app.ts\ntest command: \ngit repository: \nkeywords: \nauthor: Marble Tech\nlicense: (ISC) \nAbout to write to /home/rbsrafa/projects/javascript/package.json:\n\n{\n  \"name\": \"my-project\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Fubeca API Tutorial\",\n  \"main\": \"app.ts\",\n  \"scripts\": {'{'}\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"Marble Tech\",\n  \"license\": \"ISC\"\n}\n\n\nIs this OK? (yes) y`}\n      </CodeBlock>\n          \n      \n      <p>By chosing yes a <code>package.json</code> file will be created for you. Now you need to install all the dependencies of the project with the command:</p>\n      <CodeBlock>\n        {'$ npm install --save body-parser chai express joi mocha nyc mysql2 reflect-metadata supertest ts-node typeorm typescript nodemon dotenv multer @types/body-parser @types/chai @types/express @types/joi @types/mocha @types/node @types/node @types/supertest @types/dotenv @types/multer'}\n      </CodeBlock>\n      <p>\n        This command will create a <code>node_modules</code> folder and place all the dependencies inside it. It also creates a <code>package-lock.json</code> file for you.\n        Once npm finishes the installation type <code>tsc --init</code> it will create a file called <code>tsconfig.json</code>, this file is responsible for the typescript configuration.\n        We need to set the following configurations in <code>tsconfig.json</code>:\n      </p>\n      <CodeBlock>\n        {`{\n\"compilerOptions\": {\n    /* Basic Options */\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"lib\": [\"es6\", \"dom\"],\n    \n    /* Strict Type-Checking Options */\n    \"strict\": true,\n    \"esModuleInterop\": true,\n\n    /* Experimental Options */\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    }\n}`}\n      </CodeBlock>\n\n      <p>\n      Create a file named <code>nodemon.json</code> and add these lines of code:\n      </p>\n      <CodeBlock>\n{`{\n  \"watch\": [\"src\", \"tsconfig.json\"],\n  \"ext\": \"ts\",\n  \"ignore\": [\"src/**/*.spec.ts\"],\n  \"exec\": \"ts-node ./src/server/server.ts\"\n}`}\n      </CodeBlock>\n      <p>\n      We will use the <code>dotenv</code> library to read the system environment variables without having to set them in our local machine. To do it create a file called <code>.env</code> in the root folder <code>my-project</code>. We are going to create the environment inside this file and read their values in our application. Please <strong>DO NOT FORGET</strong> to change the values in <code>DATABASE_USER</code> and <code>DATABASE_PASSWORD</code> to match your database settings:\n      </p>\n      <CodeBlock>\n        {`//my-project/.env\n\n# SERVER\nSERVER_PORT=3000\n\n# DATABASE\nDATABASE_HOST=\"localhost\"\nDATABASE_USER=\"user\"\nDATABASE_PASSWORD=\"password\"\nDATABASE_DB=\"my_project\"`}\n      </CodeBlock>\n      \n      <p>\n      Create a folder named <code>src</code>. Inside the <code>src</code> folder create 2 other folders: <code>client</code> and <code>server</code>.\n\n      Inside the <code>server</code> folder create 2 files: <code>app.ts</code> and <code>server.ts</code>.\n\n      At this point your project structure should look like this:\n      </p>\n      <img src='./images/initialFolderStructure.png' width='100%' />\n      <p>\n      To test if everything is working we first need to modify the <code>package.json</code> file a little bit. Open it and add the \"start\" script inside the object \"scripts\":      \n      </p>\n      <CodeBlock>\n{`{\n  \"name\": \"my-project\",\n  \"version\": \"0.1.0\",\n  \"description\": \"\",\n  \"main\": \"app.ts\",\n  \"scripts\": {\n    \"start\":\"nodemon\", // insert this line\n    \"test\": \"echo 'Error: no test specified' && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"@types/body-parser\": \"^1.17.0\",\n    \"@types/chai\": \"^4.1.7\",\n    \"@types/dotenv\": \"^6.1.0\",\n    \"@types/express\": \"^4.16.1\",\n    \"@types/joi\": \"^14.3.2\",\n    \"@types/mocha\": \"^5.2.6\",\n    \"@types/node\": \"^11.9.5\",\n    \"@types/supertest\": \"^2.0.7\",\n    \"body-parser\": \"^1.18.3\",\n    \"chai\": \"^4.2.0\",\n    \"dotenv\": \"^6.2.0\",\n    \"express\": \"^4.16.4\",\n    \"joi\": \"^14.3.1\",\n    \"mocha\": \"^6.0.2\",\n    \"mysql2\": \"^1.6.5\",\n    \"nodemon\": \"^1.18.10\",\n    \"nyc\": \"^13.3.0\",\n    \"reflect-metadata\": \"^0.1.13\",\n    \"supertest\": \"^3.4.2\",\n    \"ts-node\": \"^8.0.2\",\n    \"typeorm\": \"^0.2.14\",\n    \"typescript\": \"^3.3.3333\"\n  }\n}`}\n      </CodeBlock>\n      <p>\n      This change allows for running the application typing <code>npm start</code> in the terminal.\n      Finally change the code inside the <code>app.ts</code> and <code>server.ts</code> respectively:\n      </p>\n      <CodeBlock>\n      {`//my-project/src/server/app.ts\n\nimport express from 'express';\n\nexport async function createApp() {\n\n    // Create express application\n    const app = express();\n\n    // Add the root route '/' to application\n    app.get('/', (req, res) => {\n      res.send(\"<h2>It\\'s working</h2>\");\n    });\n\nreturn app;\n}`}\n      </CodeBlock>\n\n      <CodeBlock>\n        {`//my-project/src/server/server.ts\n\nimport dotenv from 'dotenv';\n// Get Environment Variables from .env file\ndotenv.config();\nimport { createApp } from \"./app\";\n\n(async () => {\n\n    // Create the express application\n    const app = await createApp();\n\n    // Get the port number from the Environment Variable\n    const port = process.env.SERVER_PORT; \n\n    // Start the server\n    app.listen(port, () => {\n        console.log(\n            \\`The server is running on port \\${port}!\\`\n        );\n    });\n\n})();\n`}\n      </CodeBlock>\n\n      <p>\n      On your terminal type the command:\n      </p>\n      <CodeBlock>\n        {'npm start'}\n      </CodeBlock>\n\n      <p>\n        Nodemon will be watching for any changes in the entire project and will automatically reload it for us. We only have to save the changed files and see the magic happen.\n        Open your browser of preference and type <code>localhost:3000</code>.\n        You should then see the message `It's working` on it. If for some reason this port is already in use a error message will be shown in your terminal, to solve this problem you can just change the port number in the server.ts file or turn off your other application that is using this port. \n      </p>\n\n      <img src='/images/itIsWorking.png' width='100%' />\n      </Col>\n    )\n}\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport { CodeBlock } from '../lib/components/codeBlock/codeBlock';\n\nexport function database(props?:any) {\n    return <Col>\n\n        <h2>Database Configuration</h2>\n\n        <p>To link your application with the MySQL Database you'll need to follow a few steps:\n        </p>\n        <p className=\"lead\">\n        Create the MySQL database\n        </p> \n        <p>Create a new database called <code>my_project</code> using a MySQL database manager or type the following command in mysql shell:\n        </p>\n        <CodeBlock>\n          {'mysql> create database my_project;'}\n        </CodeBlock>\n        <p>\n        Inside the <code>server</code> folder create a new folder called <code>config</code> and add a new file named <code>db.ts</code>.\n        </p>\n        <CodeBlock>\n          {`//my-project/src/server/config/db.ts\nimport { createConnection, getConnectionManager } from \"typeorm\";\n\nexport async function createDbConnection() {\n\n  // Set database variables from environment\n  const DATABASE_HOST = process.env.DATABASE_HOST;\n  const DATABASE_PASSWORD = process.env.DATABASE_PASSWORD;\n  const DATABASE_USER = process.env.DATABASE_USER;\n  const DATABASE_DB = process.env.DATABASE_DB;\n\n  // Create a database connection\n  await createConnection({\n    type: \"mysql\",\n    host: DATABASE_HOST,\n    port: 3306,\n    username: DATABASE_USER,\n    password: DATABASE_PASSWORD,\n    database: DATABASE_DB,\n    entities: [],\n    synchronize: true\n  });\n\n  // Check if connection is successful\n  const connection = getConnectionManager();\n  console.log('Is DB connected:', connection.connections[0].isConnected);\n}\n`}\n        </CodeBlock>\n        <p>\n        Now open the <code>app.ts</code> file, import the createDbConnection and call the function to initialise the database: \n        </p>\n        <CodeBlock>\n{`//my-project/src/server/app.ts\n\nimport express from 'express';\nimport {'{'} createDbConnection } from './config/db'; //  Add this line\n\nexport async function createApp() {'{'}\n\n  await createDbConnection(); //  Add this line\n\n  const app = express();\n\n  app.get('/', (req, res) => {'{'}\n    res.send('<h2>It\\'s working</h2>');\n  });\n\n  return app;\n}`}\n        </CodeBlock>\n        <p>\n        If everything was done right you should see this message on your terminal:\n        </p>\n        <CodeBlock>\n{`Is DB connected: true\nThe server is running on port 3000!`}\n        </CodeBlock>\n\n  </Col>;\n}","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport { CodeBlock } from '../lib/components/codeBlock/codeBlock';\n\nexport function entities(props?:any) {\n    return <Col>\n\n    <h2>Creating the Entity Classes</h2>\n\n    <p>\n      Now that the project is running and the database connection was established you will learn how to create the entities with the support of typeORM that is an Object Relational Mapper. This library allows for the creation of Entities in a TypeScript Class that will be automatically mapped into a table in the database.\n      Inside the <code>server</code> folder create a folder named <code>entities</code> and place these four files (It is good practice to name the Entities with the first letter capitalized eg. <code>User</code>):\n\n    </p>\n\n    <CodeBlock>\n      {`//my-project/src/server/entities/User.ts\n\nimport { Article } from './Article';\nimport { \n  Entity, Column, PrimaryGeneratedColumn, \n  OneToMany, ManyToMany, JoinTable, OneToOne \n} from 'typeorm';\nimport{ Role } from './Role';\nimport { ProfileImage } from './ProfileImage';\n\n@Entity('users') //  Name of the database table\nexport class User {\n\n  // Auto generates an Id in database\n  @PrimaryGeneratedColumn() \n  public id!: number;\n\n  //  Add 'not null' constraint\n  @Column({nullable: false}) \n  public firstName!: string;\n\n  @Column({nullable: false})\n  public lastName!: string;\n\n  // Defines the property as unique\n  @Column({nullable:false, unique: true}) \n  public email!: string;\n\n  @Column({nullable: false})\n  public password!: string;\n\n  // A user can have many articles\n  @OneToMany(type => Article, article => article.user)\n  public articles!: Article;\n\n  // A user can have many roles and a role can be assigned to many users\n  @ManyToMany(type => Role, role => role.users)\n  @JoinTable({\n    name: 'user_roles', //  junction table name in database\n    joinColumn: {name: 'userId'}, //  property name of the owner\n    inverseJoinColumn: {name: 'roleId'} //  property name of the inverse relation\n  })\n  public roles!: Role[];\n\n  @OneToOne(type => ProfileImage, profileImage => profileImage.user)\n  public profileImage!: ProfileImage;\n\n  public constructor(\n    firstName: string,\n    lastName: string,\n    email: string,\n    password: string\n  ){\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.email = email;\n    this.password = password;\n  }\n}\n      \n      `}\n    </CodeBlock>\n    <CodeBlock>\n{`//my-project/src/server/entities/Article.ts\n\nimport { Entity, Column, PrimaryGeneratedColumn, ManyToOne} from 'typeorm';\nimport { User } from './User';\n\n@Entity('articles') //  Name of the table in database\nexport class Article {\n  // Auto generates an Id in database\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  // Add 'not null' constraint\n  @Column({nullable: false})\n  public title!: string;\n\n  // Define the content to be of type 'long text'\n  @Column({type: 'longtext'})\n  public content!: string;\n\n  @ManyToOne(\n    type => User, user => user.articles, \n    {onDelete: 'CASCADE'} //  delete the association if user is deleted\n  )\n  public user!: User;\n\n  public constructor(\n    title: string,\n    content: string,\n  ){\n    this.title = title;\n    this.content = content;\n  }\n}\n`}\n      \n    </CodeBlock>\n    <CodeBlock>\n{`//my-project/src/server/entities/ProfileImage.ts\n\nimport { Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn } from 'typeorm';\nimport { User } from './User';\n\n@Entity('profile_images') //  Name of the table in database\nexport class ProfileImage {\n\n  // Auto generates an Id in database\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n  // Add 'not null' constraint\n  @Column({nullable: false})\n  public url!: string;\n\n  @OneToOne(\n    type => User, user => user.profileImage,\n    {onDelete: 'CASCADE'} //  Deletes the association if user is deleted\n  )\n  @JoinColumn()\n  public user!: User\n\n  public constructor(\n    url: string\n  ){\n    this.url = url;\n  }\n}\n`}\n    </CodeBlock>\n\n    <CodeBlock>\n{`//my-project/src/server/entities/Role.ts\n\nimport { Entity, Column, PrimaryGeneratedColumn, ManyToMany} from 'typeorm';\nimport { User } from './User';\n\n@Entity('roles') //  name of table in database\nexport class Role {\n\n  // Auto generates an Id in database\n  @PrimaryGeneratedColumn()\n  public id!: number;\n\n\n  @Column({\n    type: 'enum', //  declare the type as ENUM\n    enum:['user', 'author', 'admin'], //  Property can only be one of them\n    nullable: false, //  Not null constraint\n    unique: true // Value must be unique\n  })\n  public name!: string;\n\n  // A role can be assigned to many users and a user can have many roles\n  @ManyToMany(type => User, user => user.roles)\n  public users!: User[];\n\n  public constructor(\n    name: string\n  ){\n    this.name = name;\n  }\n}\n`}\n    </CodeBlock>\n    <p>\n    TypeORM provides many functionalities. In these files we have used some annotations to inform what configuration should be passed to the tables, columns and relationships:\n    </p>\n    <ul>\n      <li>\n      <code>@Entity</code> - Declares the class as an table. As an option we can pass the name of the table, if blanc the class name will be used.\n      </li>\n      <li>\n      <code>@Column</code> - Declares the class properties as columns of the table. Many options can be passed through it, for more information see <a href=\"https://github.com/typeorm/typeorm/blob/master/docs/entities.md#column-options\">TypeORM - Column Options</a>\n      </li>\n      <li>\n      <code>@OneToOne</code> - Declares a one-to-one relationship between two tables. A foreign key is added in the table where it is declared. See more at <a href=\"https://github.com/typeorm/typeorm/blob/master/docs/one-to-one-relations.md\">TypeORM - One To One Relations</a>\n      </li>\n      <li>\n      <code>@ManyToOne</code> / <code>@OneToMany</code> - Declares a many-to-one / one-to-many relationship between two tables. The @ManyToOne annotation inserts a foreign key with the id of the associated table. See more at <a href=\"https://github.com/typeorm/typeorm/blob/master/docs/many-to-one-one-to-many-relations.md\">TypeORM - Many To One / One To Many Relations</a>\n      </li>\n      <li>\n      <code>@ManyToMany</code> - Declares a many-to-many relationship between two tables. The owner table must have the @JoinTable annotation in its class. A junction with the combined name of the tables will be automaticaly created in the database, this name can be changed passing some options as we have seen in the code. When using the annotation in both sides of the relationship the bi-directional searching is enabled in the typeORM repository methods as we will see during the controllers creation. To see more access <a href=\"https://github.com/typeorm/typeorm/blob/master/docs/many-to-many-relations.md\">TypeORM - Many To Many Relations</a>\n      </li>\n    </ul>\n    <p>\n    If you run the application now nothing will be created in the database, it is because we need to inform TypeORM which entities to map to the database.\n\n    Open the <code>db.ts</code> file and import all the created entities and add them in the entities array inside the <code>createConnection</code> function:\n\n    </p>\n  <CodeBlock>\n    {`//my-project/src/server/config/db.ts\n\n\nimport { createConnection, getConnectionManager } from \"typeorm\";\nimport{ User } from '../entities/User'; //  Add this line\nimport { Article } from '../entities/Article'; //  Add this line\nimport { Role } from '../entities/Role'; //  Add this line\nimport { ProfileImage } from '../entities/ProfileImage'; //  Add this line\n\nexport async function createDbConnection() {\n\n  // Set database variables from environment\n  const DATABASE_HOST = process.env.DATABASE_HOST;\n  const DATABASE_PASSWORD = process.env.DATABASE_PASSWORD;\n  const DATABASE_USER = process.env.DATABASE_USER;\n  const DATABASE_DB = process.env.DATABASE_DB;\n\n  // Create a database connection\n  await createConnection({\n    type: \"mysql\",\n    host: DATABASE_HOST,\n    port: 3306,\n    username: DATABASE_USER,\n    password: DATABASE_PASSWORD,\n    database: DATABASE_DB,\n    entities: [User, Article, Role, ProfileImage], //  Add this line\n    synchronize: true,\n  });\n\n  // Check if connection is successful\n  const connection = getConnectionManager();\n  console.log('Is DB connected:', connection.connections[0].isConnected);\n\n  // Create Roles (if non existent) on database connection\n  try {\n    const roleRepository = await connection.get('default').getRepository(Role);\n\n    // If user role does not exist, create it\n    if(! await roleRepository.findOne({where: {name: 'user'}})){\n      await roleRepository.save({name:'user'});\n    }\n\n    // If author role does not exist, create it\n    if(! await roleRepository.findOne({where: {name: 'author'}})){\n      await roleRepository.save({name:'author'});\n    }\n\n    // If admin role does not exist, create it\n    if(! await roleRepository.findOne({where:{name: 'admin'}})){\n      await roleRepository.save({name:'admin'});\n    }\n\n  }catch(error){\n    console.log(error);\n  }\n}\n    \n    `}\n  </CodeBlock>\n  <p>\n  At this point you are able to run the application with the command <code>npm start</code> and check the created tables in your database:\n  </p>\n\n<CodeBlock>\n  {`\nmysql> describe articles; describe profile_images; describe roles; describe user_roles; describe users;\n\n+---------+--------------+------+-----+---------+----------------+\n| Field   | Type         | Null | Key | Default | Extra          |\n+---------+--------------+------+-----+---------+----------------+\n| id      | int(11)      | NO   | PRI | NULL    | auto_increment |\n| title   | varchar(255) | NO   |     | NULL    |                |\n| content | varchar(255) | NO   |     | NULL    |                |\n| userId  | int(11)      | YES  | MUL | NULL    |                |\n+---------+--------------+------+-----+---------+----------------+\n4 rows in set (0.00 sec)\n\n+--------+--------------+------+-----+---------+----------------+\n| Field  | Type         | Null | Key | Default | Extra          |\n+--------+--------------+------+-----+---------+----------------+\n| id     | int(11)      | NO   | PRI | NULL    | auto_increment |\n| url    | varchar(255) | NO   |     | NULL    |                |\n| userId | int(11)      | YES  | UNI | NULL    |                |\n+--------+--------------+------+-----+---------+----------------+\n3 rows in set (0.00 sec)\n\n+-------+-------------------------------+------+-----+---------+----------------+\n| Field | Type                          | Null | Key | Default | Extra          |\n+-------+-------------------------------+------+-----+---------+----------------+\n| id    | int(11)                       | NO   | PRI | NULL    | auto_increment |\n| name  | enum('user','author','admin') | NO   |     | NULL    |                |\n+-------+-------------------------------+------+-----+---------+----------------+\n2 rows in set (0.01 sec)\n\n+--------+---------+------+-----+---------+-------+\n| Field  | Type    | Null | Key | Default | Extra |\n+--------+---------+------+-----+---------+-------+\n| userId | int(11) | NO   | PRI | NULL    |       |\n| roleId | int(11) | NO   | PRI | NULL    |       |\n+--------+---------+------+-----+---------+-------+\n2 rows in set (0.00 sec)\n\n+-----------+--------------+------+-----+---------+----------------+\n| Field     | Type         | Null | Key | Default | Extra          |\n+-----------+--------------+------+-----+---------+----------------+\n| id        | int(11)      | NO   | PRI | NULL    | auto_increment |\n| firstName | varchar(255) | NO   |     | NULL    |                |\n| lastName  | varchar(255) | NO   |     | NULL    |                |\n| email     | varchar(255) | NO   | UNI | NULL    |                |\n| password  | varchar(255) | NO   |     | NULL    |                |\n+-----------+--------------+------+-----+---------+----------------+\n5 rows in set (0.00 sec)\n  `}\n</CodeBlock>\n<p>\nNote that the three Roles (<code>user</code>, <code>author</code> and <code>admin</code>) were already saved in the database as well:\n</p>\n\n\n<CodeBlock>\n  {`\nmysql> select * from roles;\n+----+--------+\n| id | name   |\n+----+--------+\n|  1 | user   |\n|  2 | author |\n|  3 | admin  |\n+----+--------+\n3 rows in set (0.00 sec)\n`}\n</CodeBlock>\n\n<p>\nLet's keep track of the project structure. It should be looking like this:\n</p>\n<img src='/images/structureAfterEntities.png' width='100%'></img>\n</Col>\n}\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport { CodeBlock } from '../lib/components/codeBlock/codeBlock';\n\nexport function repositories(props?:any) {\n    return <Col>\n\n<h2>Creating the Repositories</h2>\n<p>\n  To be able to access the database we will import the Repository Layer provided by TypeORM. A repository will be needed for each entity. Please create a new folder called <code>repositories</code> inside the <code>server</code> folder and place these 4 files:\n</p>\n<CodeBlock>\n  {`//my-project/src/server/repositories/userRepository.ts\n  \nimport { getConnection } from 'typeorm';\nimport { User } from '../entities/User';\n\nexport function userRepository() {\n  return getConnection().getRepository(User);\n}`}\n  </CodeBlock>\n  <CodeBlock>\n    {`//my-project/src/server/repositories/articleRepository.ts\n\nimport { getConnection } from 'typeorm';\nimport { Article } from '../entities/Article';\n\nexport function articleRepository() {\n  return getConnection().getRepository(Article);\n}`}\n  </CodeBlock>\n<CodeBlock>\n  {`//my-project/src/server/repositories/profileImageRepository.ts\n\nimport { getConnection } from 'typeorm';\nimport { ProfileImage } from '../entities/ProfileImage';\n\nexport function profileImageRepository() {\n  return getConnection().getRepository(ProfileImage);\n}\n  `}</CodeBlock>\n  \n  <CodeBlock>\n{`//my-project/src/server/repositories/roleRepository.ts\n\nimport { getConnection } from 'typeorm';\nimport { Role } from '../entities/Role';\n\nexport function roleRepository() {\n  return getConnection().getRepository(Role);\n}`}    \n    </CodeBlock>\n    <p>\n    As we will see when building the controllers, these repositories will provide out of the box functions for accessing, creating, deleting and changing data in the database.\n    </p>\n</Col>\n}","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport { CodeBlock } from '../lib/components/codeBlock/codeBlock';\n\nexport function router(props?:any) {\n    return <Col>\n\n  <h2>Creating the Routes and App Router</h2>\n\n  <p>\n  To be able to access the different routes (endpoints) in the application we need to create two routes files <code>userRoutes</code> and <code>articleRoutes</code> and a <code>router</code> that will deal with the API routing.\n\n  Create a new folder called <code>routes</code> inside the <code>server</code> folder. Please place these two files inside it:\n  </p>\n<CodeBlock>\n  {`//my-project/src/server/routes/userRoutes.ts\n\nimport express from 'express';\n\nconst routes = express.Router();\n\nroutes.get('/', (req, res) => res.send('<h1>get all users</h1>'));\nroutes.get('/:id', (req, res) => res.send('get user by id'));\nroutes.get('/:id/roles/add/:roleId', (req, res) => res.send('add role to user'));\nroutes.get('/:id/roles/remove/:roleId', (req, res) => res.send('remove role from user'));\n\nroutes.post('/', (req, res) => res.send('create user'));\n\nroutes.patch('/:id', (req, res) => res.send('update user'));\n\nroutes.delete('/:id', (req, res) => res.send('delete user'));\n\nexport default routes;`}\n</CodeBlock>\n<CodeBlock>\n{`//my-project/src/server/routes/articleRoutes.ts\nimport express from 'express';\n\nconst routes = express.Router();\n\nroutes.get('/', (req, res) => res.send('<h1>get all articles</h1>'));\nroutes.get('/:id', (req, res) => res.send('get article by id'));\n\nroutes.post('/', (req, res) => res.send('create article'));\n\nroutes.patch('/:id', (req, res) => res.send('update an article'));\n\nroutes.delete('/:id', (req, res) => res.send('delete an article'));\n\nexport default routes;\n\n`}\n</CodeBlock>\n\n<p>\nTo be able to access these routes we still need to create a <code>router.ts</code> file inside the <code>server</code> folder:\n</p>\n<CodeBlock>\n{`//my-project/src/server/router.ts\n\nimport articleRoutes from './routes/articleRoutes';\n  import userRoutes from './routes/userRoutes';\n\n  export const router = [\n    {path: '/articles', endpoints: articleRoutes},\n    {path: '/users', endpoints: userRoutes}\n  ];`}  \n</CodeBlock>\n<p>\nFinally we need to import this newly created router into the <code>app.ts</code> file and initialize it:\n</p>\n<CodeBlock>\n  {`//my-project/src/server/app.ts\n\nimport express from 'express';\nimport { createDbConnection } from './config/db';\nimport { router } from './router'; // Add this line\n\nexport async function createApp() {\n\n  await createDbConnection();\n\n  const app = express();\n\n  // For each route in the router profide the path and response\n  router.forEach(route => { // Add this loop\n    app.use(\\`/api/v1\\${route.path}\\`, route.endpoints);\n  });\n  \n  app.get('/', (req, res) =>{\n    res.send('<h2>It\\'s working</h2>');\n  });\n\n  return app;\n}`}</CodeBlock>\n<p>These routes are not doing anything smart for now, they are only returning some dummy text as the response. Run the app with the command <code>npm start</code>, open your browser and type the following routes in the browser address:\n</p>\n <p>localhost:3000/api/v1/users</p>\n\n  <img src='/images/getAllUsersRoute.png' width='100%'></img>\n\n  <p>localhost:3000/api/v1/articles</p>\n\n  <img src='/images/getAllArticlesRoute.png' width='100%'></img>\n\n</Col>\n}\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport { CodeBlock } from '../lib/components/codeBlock/codeBlock';\n\nexport function validations(props?:any) {\n    return <Col>\n    <h2>Implementing validation</h2>\n\n    <p>To add a layer of validation in our API we will use a library called Joi. It provides functionalities to help on data validation. This library was already installed within the <code>npm install</code> command at the begining of this tutorial. \n\n<strong>To check all the project dependencies open the package.json file and check the dependencies object.</strong>\n\nCreate a new folder called <code>validation</code> inside the <code>server</code> folder and add these two files:</p>\n\n    <CodeBlock>\n{`//my-project/src/server/validation/userValidation.ts\n\nimport { User } from '../entities/User';\nimport * as joi from 'joi';\n\nexport function validateUser(user: User){\n  const schema = joi.object({\n    // Should be a string with at maximum 30 characters\n    firstName: joi.string().max(30),\n    // Should be a string with at maximum 50 characters\n    lastName: joi.string().max(50),\n    // Should be a string in an email format\n    email: joi.string().email(),\n    // Should be a string with at least 6 characters\n    password: joi.string().min(6)\n    // The strip unknown options removes unknown elements from \n    // objects and arrays, blocking their inclusion in the database \n  }).options({stripUnknown: true});\n\n  return joi.validate(user, schema);\n}`}\n    </CodeBlock>\n<CodeBlock>\n  {`//my-project/src/server/validation/articleValidation.ts\n\n\nimport { Article } from '../entities/Article';\nimport * as joi from 'joi';\n\nexport function validateArticle(article: Article){\n  const schema = joi.object({\n    // Should be a string with at maximum 50 characters\n    title: joi.string().max(50),\n    // Should be a string with at minimum 50 characters\n    content: joi.string().min(50),\n    // The strip unknown options removes unknown elements from \n    // objects and arrays, blocking their inclusion in the database \n  }).options({stripUnknown: true});\n\n  return joi.validate(article, schema);\n}`}</CodeBlock>\n<p>Before moving to the next step let's check our <strong>project folder structure</strong>. After all those changes it should look like this:</p>\n\n\n<img src='/images/folderStructureAfterValidation.png' width='100%'></img>\n\n</Col>}","\nimport React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport { CodeBlock } from '../lib/components/codeBlock/codeBlock';\n\nexport function services(props?:any) {\n    return <Col>\n<h2>Creating the Services</h2>\n<p>\nThe service classes will be used to abstract data manipulation and logic implementation from our future controller classes, leaving the controllers responsible only for calling methods from the services classes.\n We are going to create five services, one for each entity and a file uploader service to be able to upload profile pictures. Inside the <code>server</code> folder create a new folder called <code>services</code> and place these five files:\n</p>\n    <CodeBlock>\n{`//my-project/src/server/services/userService.ts\n\nimport { User } from './../entities/User';\nimport { userRepository } from \"../repositories/userRepository\";\nimport { Role } from '../entities/Role';\n\nexport class UserService {\n\n  public constructor() { }\n\n  public create(newUser: User) {\n    // Create a new user object\n    const user = new User(\n      newUser.firstName, newUser.lastName, \n      newUser.email, newUser.password\n    );\n    // Save user in database and return it\n    return userRepository().save(user);\n  }\n\n  public save(user: User) {\n    // Save user in database and return it\n    return userRepository().save(user);\n  }\n\n  public findAll() {\n    // Find all users in database and return then with the profile image and roles\n    return userRepository().find({ relations: ['profileImage', 'roles'] });\n  }\n\n  public findById(id: number){\n    // Find a user by id and return it with the profile image and roles\n    return userRepository().findOne(id, { relations: ['profileImage', 'roles'] });\n  }\n\n  public update(user: User, values: any) {\n    // Get all properties to be updated\n    const properties = Object.keys(values);\n    // For each property update in user\n    properties.forEach(property => {\n      (user as any)[property] = values[property];\n    });\n    // Save and return the updated user\n    return userRepository().save(user);\n  }\n\n  public delete(id: number){\n    // Delete a user by id\n    return userRepository().delete(id);\n  }\n\n  public addRole(role: Role, user: User) {\n    // Add role in the user's roles\n    user.roles.push(role);\n    // Save and return the user\n    return userRepository().save(user);\n  }\n\n  public removeRole(role: Role, user: User) {\n    // Remove the passed role from user roles\n    user.roles = user.roles.filter(r => r.name !== role.name);\n    // Save and return the user\n    return userRepository().save(user);\n  }\n\n}`}</CodeBlock>\n<CodeBlock>\n  {`//my-project/src/server/services/articleService.ts\n\nimport {User } from './../entities/User';\nimport {Article } from './../entities/Article';\nimport{articleRepository } from \"../repositories/articleRepository\";\n\nexport class ArticleService{\n\n  public constructor(){ }\n\n  public create(newArticle: Article, user: User) {\n    // Asign the user as the article's owner\n    newArticle.user = user;\n    // Save the article and return it\n    return articleRepository().save(newArticle);\n  }\n\n  public findAll(){\n    // Find all articles in database\n    return articleRepository().find();\n  }\n\n  public findById(id: number){\n    // Find an article by id in database\n    return articleRepository().findOne(id, {relations: ['user']});\n  }\n\n  public update(article: Article, values: any) {\n    // Get all properties to be updated\n    const properties = Object.keys(values);\n    // For each property update in the article\n    properties.forEach(property => {\n      (article as any)[property] = (values)[property];\n    });\n    // Save and return the updated article\n    return articleRepository().save(article);\n  }\n\n  public delete(id: number) {\n    // Delete an article by id \n    return articleRepository().delete(id);\n  }\n\n}`}</CodeBlock>\n  <CodeBlock>\n    {`//my-project/src/server/services/roleService.ts\n\nimport {roleRepository } from \"../repositories/roleRepository\";\n\nexport class RoleService {\n\n  public constructor(){ }\n\n  public findAll() {\n    // Find all roles in database\n    return roleRepository().find();\n  }\n\n  public findById(id: number) {\n    // Find an article by id and return it\n    return roleRepository().findOne(id);\n  }\n\n}\n  `}\n  </CodeBlock>\n  <CodeBlock>\n    {`//my-project/src/server/services/profileImageService.ts\n\nimport { User } from './../entities/User';\nimport { ProfileImage } from './../entities/ProfileImage';\nimport { profileImageRepository } from \"../repositories/profileImageRepository\";\n\nexport class ProfileImageService {\n\n  public constructor(){ }\n\n  public create(image: ProfileImage, user: User) {\n    // Assign a user to the profile image\n    image.user = user;\n    // Save and return it\n    return profileImageRepository().save(image);\n  }\n\n}\n    `}\n  </CodeBlock>\n<CodeBlock>\n  {`//my-project/src/server/services/fileUploaderService.ts\n\nimport multer from 'multer';\nimport{ Request } from 'express';\n\n// Set the file destination folder and it's filename\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => cb(null, './uploads/images'),\n  filename: (req, file, cb) => cb(null, new Date().toISOString() + file.originalname)\n});\n\n// Accepts only 'jpeg' and 'png' image formats\nconst fileFilter = (req: Request, file: any, cb: any) => {\n  if(file.mimetype === 'image/jpeg' || file.mimetype === 'image/png'){\n    cb(null, true);\n  }else{\n    cb(null, false);\n  }\n}\n\n// Return the uploader setting the max image size to 5MB\nexport const uploader = multer({\n  storage: storage,\n  limits: {fileSize: 1024*1024*5},\n  fileFilter: fileFilter\n});`}</CodeBlock>\n<p>\nWe have informed multer to store the images in the <strong>my-project/uploads/images</strong> directory, but it is not enough, we still need to create these new folders and inform express about this new route.\n Create a new folder called <code>uploads</code> inside the <code>my-project</code> root folder. Inside <code>uploads</code> create another folder called <code>images</code>. After that open the <code>app.ts</code> file and include a new route pointing to the new static folder:\n</p>\n<CodeBlock>\n  {`//my-project/src/server/app.ts\n\nimport express from 'express';\nimport { createDbConnection } from './config/db';\nimport { router } from './router';\n\nexport async function createApp() {\n\n  // Create database connection\n  await createDbConnection();\n\n  // Create express application\n  const app = express();\n\n  // For each route in the router use the route endpoint\n  router.forEach(route => {\n    app.use(\\`/api/v1\\${route.path}\\`, route.endpoints);\n  });\n\n  // Inform express to look for a new static route 'uploads/images'\n  app.use('/uploads/images', express.static('uploads/images'));\n  \n  // Add route '/' to application\n  app.get('/', (req, res) =>{\n    res.send('<h2>It\\'s working</h2>');\n  });\n\n  return app;\n}`}\n  </CodeBlock> \n</Col>\n}\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport { CodeBlock } from '../lib/components/codeBlock/codeBlock';\n\nexport function controllers(props?:any) {\n    return <Col>\n<h2>Creating the Controllers</h2>\n<p>The controller classes will be responsible for receiving the HTTP requests, dealing with services to process what was requested and sending a response back to the client that accessed its endpoint.\n For our application we only need to build two controllers. Please create a new folder named <code>controllers</code> inside the <code>server</code> folder and place these two classes:\n</p>\n<CodeBlock>\n  {`//my-project/src/server/controllers/userController.ts\n\nimport { ProfileImage } from './../entities/ProfileImage';\nimport { ProfileImageService } from './../services/profileImageService';\nimport { UserService } from './../services/userService';\nimport { Request, Response } from 'express';\nimport { validateUser } from '../validation/userValidation';\nimport { RoleService } from '../services/roleService';\n\nconst userService = new UserService();\nconst roleService = new RoleService();\nconst imageService = new ProfileImageService();\n\nexport default class UserController {\n\n  public constructor() { }\n\n  public async create(req: Request, res: Response) {\n    try {\n\n      // Validate user input\n      const validation = validateUser(req.body);\n\n      // If any error return a Bad Request status and error details\n      if(validation.error) return res.status(400).json(\n        {error: validation.error.details}\n      );\n\n      // Create a new user with given inputs\n      let newUser = await userService.create(req.body);\n\n      // Get the role 'user' with id = 1\n      const userRole = await roleService.findById(1);\n\n      // A file has been sent, create a profile image and assign it to the user\n      if(req.file) {\n        const profileImage = new ProfileImage(\\`http://localhost:3000/\\${req.file.path}\\`)\n        await imageService.create(profileImage, newUser);\n      }\n\n      // Get the create user from database\n      const user = await userService.findById(newUser.id);\n\n      // Add the 'user' role to the user\n      await userService.addRole(userRole!, user!);\n\n      // // Return the created user from database\n      return res.status(201).json(user);\n\n    }catch(error) {\n      console.log(error);\n      res.status(500).json(error);\n    }\n  }\n\n  public async update(req: Request, res: Response) {\n    try {\n      const id = req.params.id;\n      const values = req.body;\n\n      // Validate user input\n      const validation = validateUser(req.body);\n      if(validation.error) return res.status(400).json(\n        {error: validation.error.details}\n      );\n\n      // Find user by id\n      const user = await userService.findById(id);\n      // If the user is not found return a 404 'Not found' error\n      if(!user) return res.status(404).json({error: \\`User id \\${id} not found\\`});\n\n      // Update user properties to passed values\n      const updated = await userService.update(user, values);\n\n      // Return updated user\n      res.status(200).json(updated);\n      \n    }catch(error) {\n      console.log(error);\n      res.status(500).json(error);\n    }\n  }\n\n  public async findAll(req: Request, res: Response) {\n    try {\n      // Find all users from database\n      const users = await userService.findAll();\n\n      // Return found users to client\n      return res.status(200).json(users);\n\n    }catch(error) {\n      console.log(error);\n      return res.status(500).json(error);\n    }\n  }\n\n  public async findById(req: Request, res: Response) {\n    try {\n      const id = req.params.id;\n\n      // Find user by id\n      const user = await userService.findById(id);\n      // If id does not exist, return a 404 'Not found' error\n      if(!user) return res.status(404).json({error: \\`User id \\${id} not found\\`});\n\n      // Return found user\n      return res.status(200).json(user);\n\n    }catch(error) {\n      console.log(error);\n      res.status(500).json(error);\n    }\n  }\n\n  public async delete(req: Request, res: Response) {\n    try {\n      // Get id from request parameters\n      const id = req.params.id;\n\n      // Delete user from database\n      const deleted = await userService.delete(id);\n\n      // If no user deleted, return Not Found error\n      if(deleted.affected === 0) return res.status(404).json({error: \\`User id \\${id} not found\\`});\n    \n      // Return status OK with deletion message\n      return res.status(200).json({message: \\`User id \\${id} deleted\\`});\n    \n    }catch(error) {\n      console.log(error);\n      res.status(500).json(error);\n    }\n  }\n\n  public async addRole(req: Request, res: Response) {\n    try {\n      const roleId = req.params.roleId;\n      const userId = req.params.id;\n\n      // Find user by id\n      const user = await userService.findById(userId);\n      // If id does not exist, return a 404 'Not found' error\n      if(!user) return res.status(404).json({error: \\`User id \\${userId} not found\\`});\n\n      // Find role to be added by its id\n      const role = await roleService.findById(roleId);\n      // If role does not exist return a 404 'Not found' error\n      if(!role) return res.status(404).json({error: \\`Role id \\${roleId} not found\\`});\n\n      // Add role to the user\n      const updated = await userService.addRole(role, user);\n\n      // Return updated user\n      res.status(201).json(updated);\n\n    }catch(error) {\n      console.log(error);\n      res.status(500).json(error);\n    }\n  }\n\n  public async removeRole(req: Request, res: Response) {\n    try {\n      const roleId = req.params.roleId;\n      const userId = req.params.id;\n\n      // Find user by id\n      const user = await userService.findById(userId);\n      // If id does not exist, return a 404 'Not found' error\n      if(!user) return res.status(404).json({error: \\`User id \\${userId} not found\\`});\n\n      // Find role by id\n      const role = await roleService.findById(roleId);\n      // If role does not exist return a 404 'Not found' error\n      if(!role) return res.status(404).json({error: \\`Role id \\${roleId} not found\\`});\n\n      // Remove the passed role from user\n      const updated = await userService.removeRole(roleId, user);\n\n      // Return the updated user\n      res.status(200).json(updated);\n\n    }catch(error) {\n      console.log(error);\n      res.status(500).json(error);\n    }\n  }\n\n}\n  `}\n</CodeBlock>\n<CodeBlock>\n  {`//my-project/src/server/controllers/articleController.ts\n\nimport { UserService } from './../services/userService';\nimport { Request, Response } from 'express';\nimport { ArticleService } from '../services/articleService';\nimport { validateArticle } from '../validation/articleValidation';\n\nconst articleService = new ArticleService();\nconst userService = new UserService();\n\nexport class ArticleController {\n\n  public constructor() { }\n\n  public async create(req: Request, res: Response) {\n    try {\n      const userId = req.body.userId;\n\n      // Create a new article from request body\n      const newArticle = req.body.article;\n\n      // Validate article input\n      const validation = validateArticle(newArticle);\n\n      // If any error return a Bad Request status and error details\n      if(validation.error) return res.status(400).json(\n        {error: validation.error.details}\n      );\n\n      // Find user by id\n      const user = await userService.findById(userId);\n      // If user does not exist return a 404 'Not found' error\n      if(!user) return res.status(404).json({error: \\`User id \\${userId} not found\\`});\n\n      // Create a new article with given inputs and the owner user\n      const article = await articleService.create(newArticle, user);\n\n      // Return the created article from database\n      return res.status(201).json(article);\n\n    }catch(error) {\n      console.log(error);\n      res.status(500).json(error);\n    }\n  }\n\n  public async update(req: Request, res: Response) {\n    try {\n      const id = req.params.id;\n      const values = req.body;\n\n      // Validate user input\n      const validation = validateArticle(req.body);\n      if(validation.error) return res.status(400).json(\n        {error: validation.error.details}\n      );\n\n      // Find article by id\n      const article = await articleService.findById(id);\n      // If article does not exist return a 404 'Not found' error\n      if(!article) return res.status(404).json({error: \\`Article id \\${id} not found\\`});\n\n      // Update article with passed values\n      const updated = await articleService.update(article, values);\n\n      // Return the updated article\n      res.status(200).json(updated);\n      \n    }catch(error) {\n      console.log(error);\n      res.status(500).json(error);\n    }\n  }\n\n  public async findAll(req: Request, res: Response) {\n    try {\n      // Find all articles from database\n      const articles = await articleService.findAll();\n\n      // Return all found articles\n      return res.status(200).json(articles);\n\n    }catch(error) {\n      console.log(error);\n      return res.status(500).json(error);\n    }\n  }\n\n  public async findById(req: Request, res: Response) {\n    try {\n      const id = req.params.id;\n\n      // Find article by id\n      const article = await articleService.findById(id);\n      // If article does not exist return a 404 'Not found' error\n      if(!article) return res.status(404).json({error: \\`Article id \\${id} not found\\`});\n\n      // Return article to the client\n      return res.status(200).json(article);\n\n    }catch(error) {\n      console.log(error);\n      res.status(500).json(error);\n    }\n  }\n\n  public async delete(req: Request, res: Response) {\n    try {\n      // Get id from request parameters\n      const id = req.params.id;\n\n      // Delete article from database\n      const deleted = await articleService.delete(id);\n\n      // If no article deleted, return Not Found error\n      if(deleted.affected === 0) return res.status(404).json({error: \\`Article id \\${id} not found\\`});\n    \n      // Return status OK with deletion message\n      return res.status(200).json({message: \\`Article id \\${id} deleted\\`});\n    \n    }catch(error) {\n      console.log(error);\n      res.status(500).json(error);\n    }\n  }\n\n}\n  `}\n</CodeBlock>\n<p>We have created a method to deal with each one of the user and article routes we have previously created.\n To link these methods to the API routes we have to change the user and article routes a little bit:\n\n</p>\n\n<CodeBlock>\n  {`//my-project/src/server/routes/userRoute.ts\n\nimport express from 'express';\nimport UserController from '../controllers/userController';\nimport { uploader } from '../services/fileUploaderService';\n\n// Initialise user controller\nconst userController = new UserController();\n\n// Create a new express router\nconst routes = express.Router();\n\n// Add routes to the router\n\nroutes.get('/', userController.findAll);\nroutes.get('/:id', userController.findById);\nroutes.get('/:id/roles/add/:roleId', userController.addRole);\nroutes.get('/:id/roles/remove/:roleId', userController.removeRole);\n\nroutes.post('/', uploader.single('profileImage'), userController.create);\n\nroutes.patch('/:id', userController.update);\n\nroutes.delete('/:id', userController.delete);\n\nexport default routes;\n  `}\n</CodeBlock>\n<CodeBlock>\n  {`//my-project/src/server/routes/articleRoute.ts\n\nimport { ArticleController } from './../controllers/articleController';\nimport express from 'express';\n\n// Initialise user controller\nconst articleController = new ArticleController();\n\n// Create a new express router\nconst routes = express.Router();\n\n// Add routes to the router\n\nroutes.get('/', articleController.findAll);\nroutes.get('/:id', articleController.findById);\n\nroutes.post('/', articleController.create);\n\nroutes.patch('/:id', articleController.update);\n\nroutes.delete('/:id', articleController.delete);\n\nexport default routes;\n  `}\n</CodeBlock>\n</Col>\n}","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport { CodeBlock } from '../lib/components/codeBlock/codeBlock';\n\nexport function bodyParser(props?:any) {\n    return <Col>\n      \n     <h2>Implementing Body Parser</h2>\n\n     <p>\n      Now that our routes and controllers are implemented we will be able to access most of the endpoints, but not yet those that use POST methodos. Our express application can not read the values that are being passed through the body of the request. \n       To be able to do it we need to implement the bodyParser library. Open the app.ts file and tell express to use the bodyParser library:\n     </p>\n\n<CodeBlock>\n  {`//my-project/src/server/app.ts\n\nimport express from 'express';\nimport { createDbConnection } from './config/db';\nimport { router } from './router';\nimport bodyParser from 'body-parser';\n\nexport async function createApp() {\n\n  // Create database connection\n  await createDbConnection();\n\n  // Create express application\n  const app = express();\n\n  // Inform express to use bodyParser\n  app.use(bodyParser.json());\n  app.use(bodyParser.urlencoded({extended: true}));\n\n  // For each route define the path and endpoint\n  router.forEach(route => {\n    app.use(\\`/api/v1\\${route.path}\\`, route.endpoints);\n  });\n\n  // Inform express to look for a new static route 'uploads/images'\n  app.use('/uploads/images', express.static('uploads/images'));\n  \n  // Add route '/' to application\n  app.get('/', (req, res) => {\n    res.send(\"<h2>It\\'s working</h2>\");\n  });\n\n  // If a  path is not found return a 404 'Not found' error\n  app.use('*', (req, res) => {\n    res.status(404).json({error: 'Route not found'});\n  });\n\n  return app;\n}`}\n</CodeBlock>\n\n</Col>}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './sidebar.css'\n\n\n\ninterface SidebarProps{\n    listItems: any[];\n    actualPath: string;\n}\ninterface SidebarState{\n    \n    \n}\nexport class Sidebar extends React.Component<SidebarProps, SidebarState>{\n    constructor(props:SidebarProps){\n        super(props)\n        this.state ={\n        }\n        this._handleListClick = this._handleListClick.bind(this)\n    }\n    private _handleListClick(key:number){\n    }\n    render(){\n        console.log(this.props.actualPath)\n        return (\n            <ul id=\"sider\" className='nav flex-column py-5'>\n            \n                {\n                    this.props.listItems.map((item:any, key:any) => \n                        <li className={'nav-item h6 px-3 ' + (this.props.actualPath === item.path ? ' active':'')} key={key} onClick={()=>this._handleListClick(key)}>\n                            <strong><Link className='nav-link' to={item.path}>{item.title}</Link></strong>\n                        </li>)\n                }\n            </ul>\n        )\n    }\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport { Content } from \"../../../lib/components\";\nimport { postsRoutes } from \"../../config/posts-routing\";\nimport { Route, Link } from 'react-router-dom';\nimport { Sidebar } from '../../../lib/components/sidebar/sidebar';\n\ninterface TutorialProps{\n    location?: any\n}\n\nexport class Tutorial extends React.Component<TutorialProps>{\n    render(){\n         const {location} = this.props\n        return (\n            <Container fluid>\n                <Row>\n                <div style={{width: '276px', minHeight: '100vh'}} className=\" bg-light \">\n                    <Sidebar listItems={postsRoutes} actualPath={location.pathname}/>\n                </div>\n                \n\n                <Col md={8} className=\"px-3\">\n                    {\n                        postsRoutes.map((item:any, key:any) => <Route exact path={item.path}  render={()=><Content className=\"py-5\">{item.post()}</Content>} key={key} />)\n                    }\n                </Col>\n                </Row>\n                \n                \n                \n            </Container>\n        )\n    }\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Form from 'react-bootstrap/Form';\n// import FormControl from 'react-bootstrap/FormControl';\nimport { Content } from \"../../../lib/components\";\nimport { postsRoutes } from \"../../config/posts-routing\";\nimport { Route, Link } from 'react-router-dom';\nimport { Sidebar } from '../../../lib/components/sidebar/sidebar';\nimport Button from 'react-bootstrap/Button';\n\ninterface RouteConf {\n    title: string;\n    path: string;\n}\n\ninterface ChallengesProps{\n    location?: any\n}\n\nexport class Challenges extends React.Component<ChallengesProps>{\n\n    private _handleChange(event:any){\n        event.preventDefault()\n        const target = event.target;\n        const value = (target.type === 'checkbox' ? target.checked : target.value) as string;\n        const name = target.name as string;\n        this.setState({[name]: value});\n       \n    }\n    private _handleSubmit(){\n        let t = `app.get(\\\"/\\\", (req, res) => {\n            res.send(\\\"This is the home page\\!\\\");\n        });`;\n        // let t = `texto`;\n        // let res;\n        let responseJ;\n        (async()=>{\n            let res = await (async()=>{\n                await fetch(\"http://localhost:3000/chal\",{\n                    method:'POST',\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body:JSON.stringify({t:t})\n                }).then((response:any) => { return response.json()})\n            })()\n            console.log(res);\n        })()        \n    }\n    render(){\n        return (\n            <Container fluid>\n                <Row>\n                <div style={{width: '276px', }} className=\" bg-light \">\n                    <Sidebar listItems={[{title: 'Challenge one', path: '/challenges'}] as RouteConf[]} actualPath={this.props.location.pathname}/>\n                </div>\n                <Col md={8} className=\"px-3\">\n                    <Content className=\"py-5\">\n                        <h2>Challenge One</h2>\n                        <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n                        </p>\n                        <Container fluid>\n                        <Form>\n                            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                            <Form.Label>Example textarea</Form.Label>\n                            <Form.Control as=\"textarea\" rows={10} />\n                            </Form.Group>\n                        </Form>\n                        <Button className=\"float-right\" variant=\"primary\" onClick={this._handleSubmit}><strong>POST</strong></Button>\n                        </Container>\n                    </Content>\n                </Col>\n                </Row>\n            </Container>\n        )\n    }\n}","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport { Section } from '../../../lib/components/section/section';\n\nimport { withRouter } from \"react-router-dom\";\nimport Col from 'react-bootstrap/Col';\nimport { Hero } from '../../../lib/components/hero/hero';\nimport { Signup } from '../../../lib/components';\n\nexport class Register extends React.Component{\n    render(){\n        const {history}:any = this.props\n        return (\n            <Container fluid className=\"bg-light px-0\">\n                <Hero><Signup history={history}/></Hero>\n                <Container fluid >\n                    <Section>\n                        <Col className=\"text-center\">\n                            <Image src=\"./images/profileImage.svg\" roundedCircle className=\"mb-3\"/>\n                            <h3>Fernando Marinho</h3>\n                            <p>\n                            Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n                            </p>\n                        </Col>\n                        <Col className=\"text-center\">\n                            <Image src=\"./images/profileImage.svg\" roundedCircle className=\"mb-3\" />\n                            <h3>Gustavo Lessa</h3>\n                            <p>\n                            Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n                            </p>\n                        </Col>\n                        <Col className=\"text-center\">\n                            <Image src=\"./images/profileImage.svg\" roundedCircle className=\"mb-3\"/>\n                            <h3>Lucival</h3>\n                            <p>\n                            Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n                            </p>\n                        </Col>\n                        <Col className=\"text-center\">\n                            <Image src=\"./images/profileImage.svg\" roundedCircle className=\"mb-3\"/>\n                            <h3>Rafael Barros</h3>\n                            <p>\n                            Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n                            </p>\n                        </Col>\n                    </Section>\n                </Container>\n            </Container>\n        )\n    }\n}","import React from 'react';\nimport { Home } from \"../pages/home/home\";\nimport { Tutorial } from \"../pages/tutorial/tutorial\";\nimport { Challenges } from \"../pages/challenges/challenges\";\nimport { Register } from \"../pages/register/register\";\n\ninterface RouteConf {\n    isIndex?: boolean;\n    displayInNavBar?: boolean;\n    title: string;\n    path: string;\n    component: JSX.Element //React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\n    exact: boolean;\n    isProtected?: boolean;\n    onlyGuest?:boolean;\n}\n\nexport const PATHS = {\n    home: \"/\",\n    tutorial: \"/tutorial/\",\n    challenges: \"/challenges\",\n    login: \"/login\",\n    register: \"/register\",\n}\n\nexport const routes: RouteConf[] = [\n    { isIndex: true, title: \"Home\", path: PATHS.home, component: <Home/> , exact:true, displayInNavBar:false },\n    { isIndex: false, title: \"Tutorial\", path: PATHS.tutorial, component: <Tutorial/>, exact:false },\n    { isIndex: false, title: \"Challenges\", path: PATHS.challenges, component: <Challenges/>, exact:false, isProtected:true },\n    { isIndex: false, title: \"Login\", path: PATHS.login, component: <Home/>, exact:true, onlyGuest:true },\n    { isIndex: false, title: \"Register\", path: PATHS.register, component: <Register/>, exact:true, onlyGuest:true },\n    \n]","import React from 'react';\nimport {  Route as ReactRoute, Redirect, RouteComponentProps } from 'react-router-dom';\nimport * as authGuard from '../../../helpers/authGuard';\n\ninterface ProtectedRouteProps {\n    component: JSX.Element,\n    path: string,\n    isProtected?:boolean; \n    exact?:boolean;\n}\n\nexport class Route extends React.Component<ProtectedRouteProps>{\n    constructor(props:ProtectedRouteProps){\n        super(props)\n    }\n    render(){\n        const { component, isProtected, ...rest } = this.props;\n        if(!!isProtected){\n            return ( <ReactRoute \n                    {...rest}\n                    render={props =>\n                    authGuard.loggedIn() ? (\n                        React.cloneElement(component, props={...props})\n                    ) : (\n                        <Redirect\n                        to={{\n                            pathname: \"/login\",\n                            state: { from: props.location }\n                        }}\n                        />\n                    )\n                    }\n                />\n                );\n        \n        }else{\n            return (<ReactRoute \n                {...rest}\n                render={props =>React.cloneElement(component, props={...props})}/>\n            );\n        }\n        \n    }\n}\n","import React from \"react\";\nimport { Switch } from \"react-router\";\nimport { routes } from \"../../../app/config/routing\";\nimport { Route } from \"../route/route\";\nexport class Main extends React.Component{\n\n    render(){\n        return (\n            <Switch>\n            <React.Fragment>\n                <div className=\"\" style={{minHeight: \"800px\", backgroundColor: 'var(--white)'}}>\n                    {\n                        routes.map((item, key) => {\n                            const {...rest} = item;\n                           return <Route \n                                {...rest}\n                                key={key}\n                            />\n\n                    })\n                    }\n                </div>\n            </React.Fragment>\n        </Switch>\n        )\n    }\n}","import React from \"react\";\nimport { Switch, withRouter } from \"react-router-dom\";\nimport { Route } from \"../../lib/components/route/route\";\nimport { Header, Footer } from \"../../lib/components\";\nimport { routes } from \"../config/routing\";\nimport * as authGuard from '../../helpers/authGuard';\nimport { Main } from \"../../lib/components/main/main\";\n\nclass Layout extends React.Component {\n    public render() {\n        const HeaderM = withRouter(({ history }) =>\n                    <Header\n                        history={history}\n                        items={\n                            routes.filter(item => item.displayInNavBar !== false)\n                                .map(item => {\n                                    return {\n                                        href: item.path,\n                                        isIndex: item.isIndex,\n                                        title: item.title,\n                                        onlyGuest: item.onlyGuest || false\n                                    };\n                                })\n                        }\n                    />\n                    \n                    )\n        return (\n            <React.Fragment>\n                <HeaderM/>\n                <Main/>\n                <Footer />\n            </React.Fragment>\n        );\n    }\n}\nexport default Layout;","import \"./environment/environment\"\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport Layout from './app/pages/layout';\n\nReactDOM.render((\n    <BrowserRouter>\n        <Layout />\n    </BrowserRouter>\n    ), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}